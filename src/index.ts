import { app, BrowserWindow, ipcMain, session } from "electron";
import { PassThrough } from "node:stream";
import { ipcControllers, pod, portForwardManager } from "./ipc-controllers";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}
let mainWindow: BrowserWindow | null = null;

const createWindow = async (): Promise<void> => {
  await session.defaultSession.clearCache();

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1_280,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Cache-Control": "no-cache",
        },
      });
    },
  );

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  Object.entries(ipcControllers).forEach(([channel, listener]) => {
    ipcMain.removeHandler(channel);
    ipcMain.handle(channel, listener);
  });
  // Handle find in page requests
  ipcMain.on("find-in-page", (event, text) => {
    mainWindow?.webContents.findInPage(text);
  });

  ipcMain.on("stop-find-in-page", () => {
    mainWindow?.webContents.stopFindInPage("clearSelection");
  });

  ipcMain.on("find-next", (event, text) => {
    mainWindow?.webContents.findInPage(text, { forward: true, findNext: true });
  });

  ipcMain.on("find-previous", (event, text) => {
    mainWindow?.webContents.findInPage(text, {
      forward: false,
      findNext: true,
    });
  });

  const streamsMap: Record<string, PassThrough> = {};

  ipcMain.on("stream-pod-logs", (event, namespace, name, container, follow) => {
    pod.tailLogs({ namespace, name, container, follow }).then((readStream) => {
      streamsMap[`${namespace}/${name}/${container}`] = readStream;
      readStream.on("data", (chunk) => {
        event.sender.send("log-data", chunk.toString());
      });

      readStream.on("end", () => {
        event.sender.send("log-end");
      });

      readStream.on("error", (error) => {
        event.sender.send("log-error", error.message);
      });
    });
  });

  ipcMain.on("stop-stream-pod-logs", (event, namespace, name, container) => {
    const key = `${namespace}/${name}/${container}`;
    const stream = streamsMap[key];
    if (stream) {
      stream.destroy();
      streamsMap[key] = null;
    }
  });

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    portForwardManager.closeAllPortForwards();
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
